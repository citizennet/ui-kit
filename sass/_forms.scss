//
// Forms
// --------------------------------------------------

// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $line-height-computed;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: bold;
}

// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus;
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075));
  @include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;

  // Placeholder
  @include placeholder;

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}

// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 8.3, iOS doesn't support `datetime` or `week`.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    &.form-control {
      line-height: $input-height-base;
    }

    &.input-sm,
    .input-group-sm & {
      line-height: $input-height-small;
    }

    &.input-lg,
    .input-group-lg & {
      line-height: $input-height-large;
    }
  }
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}

.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}

.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}

// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}

// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  // Size it appropriately next to real form controls
  padding-top: ($padding-base-vertical + 1);
  padding-bottom: ($padding-base-vertical + 1);
  // Remove default margin from `p`
  margin-bottom: 0;
  min-height: ($line-height-computed + $font-size-base);

  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $input-border-radius-small);
.form-group-sm {
  .form-control {
    height: $input-height-small;
    padding: $padding-small-vertical $padding-small-horizontal;
    font-size: $font-size-small;
    line-height: $line-height-small;
    border-radius: $input-border-radius-small;
  }
  select.form-control {
    height: $input-height-small;
    line-height: $input-height-small;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    height: $input-height-small;
    min-height: ($line-height-computed + $font-size-small);
    padding: ($padding-small-vertical + 1) $padding-small-horizontal;
    font-size: $font-size-small;
    line-height: $line-height-small;
  }
}

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $input-border-radius-large);
.form-group-lg {
  .form-control {
    height: $input-height-large;
    padding: $padding-large-vertical $padding-large-horizontal;
    font-size: $font-size-large;
    line-height: $line-height-large;
    border-radius: $input-border-radius-large;
  }
  select.form-control {
    height: $input-height-large;
    line-height: $input-height-large;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    height: $input-height-large;
    min-height: ($line-height-computed + $font-size-large);
    padding: ($padding-large-vertical + 1) $padding-large-horizontal;
    font-size: $font-size-large;
    line-height: $line-height-large;
  }
}

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: ($input-height-base * 1.25);
  }
}

// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: $input-height-base;
  height: $input-height-base;
  line-height: $input-height-base;
  text-align: center;
  pointer-events: none;
}

.input-lg + .form-control-feedback,
.input-group-lg + .form-control-feedback,
.form-group-lg .form-control + .form-control-feedback {
  width: $input-height-large;
  height: $input-height-large;
  line-height: $input-height-large;
}

.input-sm + .form-control-feedback,
.input-group-sm + .form-control-feedback,
.form-group-sm .form-control + .form-control-feedback {
  width: $input-height-small;
  height: $input-height-small;
  line-height: $input-height-small;
}

// Feedback states
.has-success {
  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}

.has-warning {
  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}

.has-error {
  @include form-control-validation($state-danger-text, $state-danger-text, $state-danger-bg);
}

// Reposition feedback icon if input has visible label above
.has-feedback label {

  & ~ .form-control-feedback {
    top: ($line-height-computed + 5); // Height of the `label` and its margin
  }
  &.sr-only ~ .form-control-feedback {
    top: 0;
  }
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  display: block; // account for any element using help-block
  margin-top: 5px;
  margin-bottom: 10px;
  color: lighten($text-color, 25%); // lighten the text some for contrast
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

// [converter] extracted from `.form-inline` for libsass compatibility
@mixin form-inline {

  // Kick in the inline
  @media (min-width: $screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .control-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .radio,
    .checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .radio input[type="radio"],
    .checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-control-feedback {
      top: 0;
    }
  }
}

// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: ($padding-base-vertical + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: ($line-height-computed + ($padding-base-vertical + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row;
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      padding-top: ($padding-base-vertical + 1); // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: floor(($grid-gutter-width / 2));
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: (($padding-large-vertical * $line-height-large) + 1);
        font-size: $font-size-large;
      }
    }
  }
  .form-group-sm {
    @media (min-width: $screen-sm-min) {
      .control-label {
        padding-top: ($padding-small-vertical + 1);
        font-size: $font-size-small;
      }
    }
  }
}

/************************************************************************
EDITOR
************************************************************************/

/* old forms */
.cn-editor {
  position: fixed;
  top: 55px;
  left: 0;
  right: 0;
  bottom: 0;
  overflow: auto;
}

/* new forms */
.cn-form {
  padding: 0 25px;
  margin: auto;
  overflow: auto;
  max-width: 1200px;

  &.cn-form-cols-2 {
    max-width: 1000px;

    @media screen and (min-width: $break-lg) {
      fieldset {
        padding-top: 25px;
        padding-left: 30%;

        legend {
          width: 30%;
          position: absolute;
          left: 0;
        }
      }
    }
  }
}

.cn-form-body {
  padding: 25px;
}

.cn-editor,
.cn-modal,
.cn-form {
  h1 + h2, .h1 + .h2 {
    font-size: 14px;
    font-weight: 300;
    color: $sub-heading;
    margin: 0 0 15px;
  }

  fieldset {
    padding-top: 55px;
    position: relative;

    legend {
      position: absolute;
      top: 17px;
    }
  }

  h3/*.section-heading*/,
  legend {
    font-size: 12px;
    font-weight: 500;
    color: $heading;
    border: 0;
    text-transform: uppercase;
  }

  &, p {
    font-size: 12px;
  }

  label {
    font-size: 12px;
    font-weight: 300;
    //    margin: 0; <-- make more specific
  }

  .form-control .list-group-item {
    padding: 0;
    border: 0;
    background: transparent;
  }
}

.has-success .control-label,
.has-error .control-label {
  @extend label;
}

fieldset,
section, {
  margin: 25px 0 0;
  padding-top: 25px;
  //  padding-bottom: 25px;
  border-top: 1px solid $form-divider;
}

.cn-form-head {
  //  margin-bottom: 0;
}

.cn-form-nav {
  padding: 50px 25px;
  //  border-right: 1px solid $form-divider;

  @media (min-width: $break-sm) {
    position: fixed;
  }

  .nav-pills {
    > li {
      margin: 0 0 10px;

      > a {
        @include border-radius(0);
        font-size: 14px;
        padding: 5px 25px;
        color: $dark-grey;

        &:hover {
          background: transparent;
          color: $black;
        }
      }

      &.active {
        > a {
          background: transparent;
          color: $black;
          border-left: 4px solid $primary-color;
          padding-left: 21px;
          font-weight: 500;

          &:hover {
            background: transparent;
            color: $black;
          }
        }
      }

      .cni {
        margin-right: 10px;
      }
    }
  }
}

.cn-form-meta {
  padding: 50px 25px;
}

input.form-control,
.input.form-control,
.input-group-addon,
textarea.form-control {
  &, .has-success &, .has-error & {
    background-color: $white;
    border: 0;
    @include box-shadow(none);
    color: inherit;
    @include border-radius($radii);
    padding: 5px 8px;
    height: 40px;
    position: relative;

    &[disabled] {
      background-color: $text-field-disabled;
      border: 1px solid $text-field-shadow;
    }

    &.date-input {
      display: inline-block;
      width: 100px;
    }

    &:focus,
    &.focused {
      //    outline: 1px solid $form-focused-outline;
      outline: 0;
      border-color: $text-field-shadow;
      @include box-shadow(none);
    }

    &:-webkit-autofill {
      background-color: $white !important;
      -webkit-box-shadow: 0 0 0px 1000px $white inset;
    }

  }
}

textarea.form-control {
  height: auto;
  min-height: 80px;
}

.form-control-feedback {
  display: none;
}

.form-control-static,
.cn-editor p.form-control-static {
  font-size: 17px;
  line-height: 30px;
  // this is supposed to be in bootstrap??
  padding-top: 5px;
  padding-bottom: 4px;
}

.radio, .checkbox {
  padding: 0;
  //  margin-top: 20px;
  margin-bottom: 20px;

  label {
    //    font-size: 16px;
    margin-right: 20px;
    display: block;

    &.checkbox-inline, &.radio-inline {
      display: inline-block;
      padding-left: 0;
    }
  }
}

.radio input[type=radio], .checkbox input[type=checkbox] {
  margin: 0;
  padding: 0;
  display: none;
  width: 20px;
  height: 20px;

  + span {
    background-image: url('../../images/sprites.png');
    background-position: no-repeat;
    width: 19px;
    height: 20px;
    display: inline-block;
    line-height: 24px;
    margin: 0 10px 0 0;
    float: left;

    .form-inline & {
      float: none;
      margin-bottom: -2px;
    }
  }
}

//input[type=radio ], input[type=checkbox] {
//  + label {
//    display: inline-block;
//    line-height: 24px;
//    margin-right: 20px;
//  }
//}

.radio input[type=radio] {
  + span {
    background-position: -21px 0;
  }

  &:checked + span {
    background-position: 0 0;
  }
}

.checkbox input[type=checkbox] {
  + span {
    background-image: url('../../images/checkbox.svg');
    background-size: cover;
    height: 19px;
  }

  &:checked + span {
    background-image: url('../../images/checkbox-checked.svg');
  }
}

.date-input {
  color: $dropdown-text;
  font-size: 14px;
}

.file-wrapper {
  position: relative;

  input[type=file].form-control {
    visibility: hidden;
    outline: 0;
  }

  .btn {
    position: absolute;
    top: 0;
    left: 0;
  }
}

.form-inline {
  .form-control,
  .control-label {
    margin-right: 16px;
  }
}

.help-block {
  color: $supporting-text;
  //  font-size: 14px;
  font-weight: 300;

  .has-error & {
    margin: -2px 3px 5px;
    padding: 7px 10px 5px;
    background: $danger-color;
    color: $danger-text;
    @include border-radius(0 0 $radii $radii);

    a {
      color: $white;
      text-decoration: underline;
    }
  }
}

// Main panel
.cn-main {
  padding: 25px;
}

@media (min-width: 768px) {
  .cn-main {
    padding-right: 40px;
    padding-left: 100px;
  }
}

.form-horizontal .control-label.text-left {
  text-align: left;
}

.button-container-top {
  margin-top: 30px;
}

table {
  &.budget-allocation {
    @include border-radius($radii);
    border-collapse: inherit;
    border-spacing: 2px;
    border: 3px solid $form-bg;

    tr {
      &:first-child td:first-child {
        @include border-top-left-radius(6px);
      }

      &:first-child td:last-child {
        @include border-top-right-radius(6px);
      }

      &:last-child td:first-child {
        @include border-bottom-left-radius(6px);
      }

      &:last-child td:last-child {
        @include border-bottom-right-radius(6px);
      }

      td {
        background-color: $white;
        padding: 5px 5px 5px 20px;
        font-size: 16px;
        height: 50px;

        &:last-child {
          text-align: right;
          width: 35%;
        }

        input {
          border-width: 0;
          background-color: $white;
          box-shadow: none;
          text-align: right;
          padding: 0;
        }
      }
    }

    .table-commission-rate {
      padding-right: 13px;
    }
  }
}

.panel {
  border: 0;

  .panel-group & {
    // need to allow dropdowns to overflow, can move this to accordion styles if we don't
    // want it applied to all group panels
    overflow: visible;
  }

  &.panel-form {
    background-color: $lighter-grey;
    border: 1px solid $form-divider;
  }

  .panel-heading {
    border: 0;
    background-color: $panel-heading-bg;
    height: 42px;
    font-size: 12px;
    color: $panel-heading;
    letter-spacing: .04em;
    line-height: 22px;

    i {
      margin-right: 5px;
    }

    .panel-group & {
      border-bottom: 1px solid $default-shadow;
    }
  }

  &.panel-primary > .panel-heading {
    background-color: $primary-color;
    color: $white;
  }

  .panel-body {
    color: $panel-body-text;

    h4 {
      font-size: 15px;
      margin-bottom: 20px;
    }

    dl {
      font-size: 12px;
      border-bottom: 1px solid $panel-heading-bg;
      padding-bottom: 10px;

      &:last-child {
        border: none;
        padding: 0;
        margin: 0;
      }

      dt {
        width: 120px;
        text-align: left;
      }

      dd {
        margin-left: 130px;
        margin-bottom: 10px;
      }
    }
  }
}

.panel-group .panel-heading + .panel-collapse .panel-body {
  border-top: 0;
}

.cn-accordion-group {

  .panel {
    margin-bottom: 0;
    @include border-radius(0);

    .panel-heading {
      border-radius: 0;

      .panel-title {
        color: $panel-accordion-heading;
      }
    }

    &:last-child {
      margin-bottom: 20px;
    }

    .panel-body {
      .panel-body-list-group {
        margin-bottom: 0;

        .list-group-item {
          border-radius: 0;
          border-width: 0;
          border-bottom-width: 1px;
          margin-top: 1px;
        }
      }
    }
  }

  &.cn-accordion-compact .panel-body {
    padding: 0;
  }
}

.cn-definition-box {
  background-color: $cn-definition-bg;
  @include border-radius($radii);
  padding: 20px;
  width: 300px;

  > span {
    display: block;
    padding-bottom: 20px;
    border-bottom: 1px solid $cn-definition-divider;
    margin-bottom: 20px;

    &:last-child {
      border: none;
    }
  }

  label {
    margin-bottom: 5px;
  }

  h3 {
    font-size: 36px;
    font-weight: 200;
    margin: 0;
    color: $cn-definition-h3;

    small {
      font-size: 12px;
      color: $cn-definition-small;
    }
  }
}

.cn-merge-form-to {
  position: relative;
  z-index: 2;
  padding-bottom: 30px;
}

.cn-merge-form-up {
  position: relative;
  margin-top: -150px;
  z-index: 1;
}

.img-placeholder {
  &.empty {
    height: 160px;
    border: 6px solid $white;
    background: url('/images/icn-camera.svg') no-repeat 50% 50%;
  }

  img {
    max-width: 100%;
  }
}

// use .col-lg-6 instead
//@media (min-width: 1480px) {
//  .col-md-6-date {
//    float: left;
//    width: 50%;
//  }
//}

.cn-autocomplete-list {
  margin: 1px 0;
  padding: 2px;
  background-color: $white;
  @include border-radius($radii $radii 0 0);

  .list-group-item {
    padding: 0 35px 0 0;
    background-color: transparent;
    border: 0;

    &:hover {
      background-color: $primary-highlight;

      .close {
        opacity: 1;
      }
    }

    &:first-child {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }

    //    .label-primary {
    //      background-color: darken($primary-highlight, 5%);
    //    }

    &,
    .has-success &,
    .has-error & {
      .form-control {
        min-height: 32px;
        padding-top: 0;
        padding-bottom: 0;
      }
      .form-control,
      .btn {
        height: 32px;
        margin: 1px 0;
        &[disabled] {
          border: 0;
          background: transparent;
        }
      }
    }

    & + tags-input .host,
    & + .host {
      .input.form-control {
        .has-success &,
        .has-error & {
          @include border-radius(0 0 $radii $radii);
        }
      }
    }

    > .tag-item {
      display: block;
      padding: 1px 8px;
      line-height: 32px;
      margin: 0;
    }

    .close {
      position: absolute;
      z-index: 99;
      top: 4px;
      right: 10px;
      opacity: 0;

      &:hover {
        color: $danger-color;
      }
    }

    .form-group {
      margin-bottom: 0;
    }

    .help-block {
      margin: 0;
    }

    .btn {
      padding-top: 6px;
      padding-bottom: 6px;
    }
  }
}

.form-control[disabled],
fieldset[disabled] .form-control {
  cursor: default;
}